# imoveis/admin.py
from django.contrib import admin
from .models import Imovel, ImagemImovel # üåü Importar o novo modelo



# 1. Define o estilo de formul√°rio inline (para fotos)
class ImagemImovelInline(admin.TabularInline):
    model = ImagemImovel
    extra = 1 # N√∫mero de formul√°rios vazios para adicionar de uma
    
    
# ==============================================================================
# CLASSE DE ADMINISTRA√á√ÉO PERSONALIZADA
# ==============================================================================
@admin.register(Imovel)
class ImovelAdmin(admin.ModelAdmin):
    # Campos que ser√£o exibidos na lista principal de im√≥veis no painel do Admin
    list_display = ('titulo', 'preco', 'tipo', 'esta_a_venda', 'data_criacao')
    
    # Adiciona filtros laterais para facilitar a organiza√ß√£o
    list_filter = ('tipo', 'esta_a_venda')
    
    # Adiciona campos de pesquisa r√°pida
    search_fields = ('titulo', 'endereco')
    
    # Permite editar o status de venda diretamente na lista (True/False)
    list_editable = ('esta_a_venda',) 
    
    # Ordem padr√£o na listagem
    ordering = ('-data_criacao',) 
    
    # üåü Adiciona o Inline √† p√°gina de edi√ß√£o do Im√≥vel
    inlines = [ImagemImovelInline]
    
    # Opcional: Define a ordem e apar√™ncia dos campos no formul√°rio de edi√ß√£o/cria√ß√£o
    fieldsets = (
        (None, {
            'fields': ('titulo', 'descricao', 'preco', 'endereco', 'tipo')
        }),
        ('Status', {
            'fields': ('esta_a_venda',),
        }),
    )

# A linha '@admin.register(Imovel)' √© a mesma que usar:
# admin.site.register(Imovel, ImovelAdmin)